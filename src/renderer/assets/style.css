:root {
    --input-invalid-color: #FA2333;
    --input-success-color: #22F095;
    --primary-color: #984ae2;
    --primary-color-darker: #833ec4;
    --bg-color-start: #f4f4f4;
    --bg-color-end: #f2f2f2;
    --fore-color: #000000;
    --reminder-list-bg-color: #e8e8e8;
    --input-color: #ffffff;
    
    --reminder-bg-color: #ffffff;
    --outline-buttton-color: #ffffff;
    --popup-accent-color: #9e9e9e;
    --select-options-color: #dddddd;
    --settings-radio-hover: rgba(200, 200, 200, 0.25);
    color-scheme: light;
    
    --header-fallback-height: 1rem;
    --header-height: env(titlebar-area-height, var(--header-fallback-height));

    --checkbox-height: 1.75rem;
    --checkbox-width: 3.5rem;
    --checkbox-margin: 8px;

    --focus-visible-color: dodgerblue;
    --focus-visible-outline: 3px solid var(--focus-visible-color);

    --input-font-size: 1.25rem;
    --input-char-size: 40ch;

    --sidebar-width: 3.5rem;
}

:root:not(:has(nav)) {
    --sidebar-width: 0;
}

::backdrop {
    --header-height: env(titlebar-area-height, var(--header-fallback-height));
}

@media (prefers-color-scheme: dark) {
    :root {
        --bg-color-start: #1f1f27;
        --bg-color-end: #1d1d22;
        --fore-color: white;
        --reminder-list-bg-color: #2c2c32;
        --input-color: #5a5757;
        --input-invalid-color: #FA2333;
        --input-success-color: #22F095;
        --reminder-bg-color: #525257;
        --outline-buttton-color: transparent;
        --popup-accent-color: #5a5a5a;
        --fore-color: white;
        --select-options-color: #4A4848;
        --focus-visible-color: #FFEBCD;
        --settings-radio-hover: rgba(175, 175, 175, 0.1);
        color-scheme: dark;
    }
    
    .reminder-form div .units {
        background-image: linear-gradient(rgb(0 0 0/20%) 0 0);
    }
}

@media (prefers-reduced-motion) {
    .reminder.ignored::after {
        animation: ignored-reminder-pulse 2400ms ease-out infinite;
    }

    .reminder.ignored #acknowledge > svg {
        animation: shake 3000ms ease-in-out infinite;
    }

    .combobox-wrapper > svg {
        transition: transform 0;
    }

    .combobox-wrapper ul[role="listbox"] {
        transition: none;
    }

    .settings-button:hover svg,
    .settings-button:focus-visible svg {
        animation-duration: 5000ms;
    }
}

*, *::before, *::after {
    box-sizing: border-box;
    font-family: 'Ubuntu', sans-serif;
}

body {
    background: linear-gradient(135deg, var(--bg-color-start), var(--bg-color-end)) !important;
    min-block-size: 100dvh;
    margin: auto;
    height: 100dvh;
    overflow: hidden;
    color: var(--fore-color);
}

main {
    margin: auto;
    margin-left: var(--sidebar-width);
    height: calc(100dvh - env(titlebar-area-height, var(--header-fallback-height)));
    padding: 1rem;
    overflow: auto;
}

.preload *,
.preload *::after,
.preload *::before {
    transition: none !important;
}

.titlebar {
    color: white;
    background: var(--primary-color);
    display: flex;
    align-items: center;
    font-size: .75em;
    font-weight: bold;
    position: relative;

    padding-left: calc(env(titlebar-area-x, 0) + 4px);

    -webkit-app-region: drag;
    user-select: none;
    -webkit-user-select: none;

    top: env(titlebar-area-y, 0);
    height: var(--header-height);
    min-width: env(titlebar-area-width, 100%);

    isolation: isolate;
    z-index: 99;
}

.titlebar img {
    width: 16px;
    height: 16px;
    margin-right: 4px;
}

section {
    display: flex;
    justify-content: start;
    align-items: center;
    color: inherit;
    flex-direction: column;
}

/* ==================================
NAV BAR
================================== */

nav {
    position: absolute;
    left: 0;
    height: calc(100% - env(titlebar-area-height, var(--header-fallback-height)));
    width: var(--sidebar-width);
    padding: 4px;

    background-color: var(--bg-color-end);
    box-shadow: 0px 0 10px 5px rgba(0,0,0,0.4);

    display: flex;
    flex-direction: column;
    align-items: center;

    /* transition: width 250ms; */
}

nav hr {
    border: 2px solid var(--input-color);
    border-radius: 4px;
    width: 100%;
    margin: 4px 0;
}

.settings-button:hover svg,
.settings-button:focus-visible svg {
    animation: gear-spin 2000ms infinite forwards;
}

.settings-tab[visible="false"] {
    visibility: hidden;
}

.settings-tab-anchor {
    color: var(--fore-color);
    text-decoration: none;
}

.settings-tab-anchor:visited {
    color: inherit;
}

@keyframes gear-spin {
    0% {
        transform: rotateZ(0deg);
    }

    80% {
        transform: rotateZ(360deg);
    }

    100% {
        transform: rotateZ(360deg);
    }
}

.nav__list {
    flex: 1;
    width: 100%;
    margin: 0;
    padding: 0.1em;
    list-style: none;

    display: flex;
    flex-direction: column;
    align-items: center;
}

.nav__list li {
    width: 100%;
    font-size: 1.25rem;
}

.nav__list label {
    width: 100%;
    cursor: pointer;
}

.nav__list label:hover span {
    background-color: var(--settings-radio-hover);
}

.nav__list span {
    width: 100%;
    border-radius: 0.15em;
    padding: 0.1em;
}

.nav__list label input[type="radio"] {
    opacity: 0;
    position: absolute;
}

.nav__list label input[type="radio"]:focus-visible + span {
    outline: var(--focus-visible-outline);
}

.nav__list label input[type="radio"]:checked + span {
    background-color: var(--select-options-color);
}

.nav__list fieldset {
    display: flex;
    flex-direction: column;
    gap: 0.25em;
}

/* ==================================
REMINDER LIST
================================== */

#reminder-list {
    height: 100%;

    width: 90%;
    min-width: fit-content;
    max-width: 800px;

    margin: 0 10px;
}

#reminder-list > * {
    font-size: 1.35rem;
}

#reminder-list > * {
    margin: 16px;
}

#reminder-list > ul {
    display: flex;
    flex-direction: column;
    align-items: center;

    background: var(--reminder-list-bg-color);
    border-radius: 8px;
    overflow-y: auto;
    overflow-x: hidden;
    padding: 10px;
    justify-content: unset;
    list-style: none;
    list-style-type: none;
    margin: 0;
    gap: 6px;

    min-height: 6.8rem;
    width: 100%;
}

#reminder-list > button {
    width: 100%;
}

#reminder-list li > button {
    min-width: 60px;
    padding: 5px;
    aspect-ratio: 1;
}

/* ==================================
REMINDERS
================================== */

.reminder {
    position: relative;
    isolation: isolate;
    z-index: 1;

    display: grid;
    grid-template-columns: 7fr 1fr 1fr 1fr 1fr;
    grid-template-rows: 100%;
    
    border-radius: 8px;
    padding: 10px;
    margin: 0 6px;
    box-shadow: 0 1px 2px black;
    background: var(--reminder-bg-color);
    width: 100%;
    min-width: fit-content;
    gap: 10px;
}

.reminder p {
    font-weight: bold;
    grid-column: 1 3;
    align-self: center;
}

.reminder button {
    align-self: center;
}

.reminder .next-timer-play {
    text-decoration: underline var(--primary-color);
    font-style: normal;
    font-weight: normal;
    text-align: center;
}

.reminder.ignored::after {
    content: '';
    position: absolute;
    z-index: -1;
    inset: 0;
    border-radius: inherit;
    outline: 0px solid var(--input-invalid-color);
    animation: ignored-reminder-pulse 1200ms ease-out infinite;
}

.reminder.ignored::before {
    content: '';
    inset: 0;
    position: absolute;
    margin: auto;
    border: 2px solid var(--input-invalid-color);
    border-radius: inherit;
}

.reminder.ignored .acknowledge > svg {
    animation: shake 1200ms ease-in-out infinite;
}

@keyframes ignored-reminder-pulse {
    0% {
        outline-offset: 0px;
        outline-width: 0;
    }

    10% {
        outline-offset: 0px;
        outline-width: 5px;
    }

    30% {
        opacity: 1;
    }

    95% {
        outline-offset: 10px;
        opacity: 0;
    }

    100% {
        outline-offset: 10px;
        opacity: 0;
        outline-width: 5px;
    }
}

/* ==================================
REMINDER FORM
================================== */

.reminder-form {
    color: inherit;
    font-size: var(--input-font-size);
    width: var(--input-char-size);
    margin: 8px;
}

.reminder-form div {
    --columns: 10;
    --select-columns: 1;

    display: grid;
    grid-template-columns: repeat(1fr, var(--columns));
    gap: 2px 0;
    margin-bottom: 12px;
}

.reminder-form div .units {
    border-top-right-radius: 4px;
    border-bottom-right-radius: 4px;
    padding: 8px ;
    font-size: var(--input-font-size);
    text-align: center;
    
    background-color: var(--input-color);
    background-image: linear-gradient(rgb(0 0 0/10%) 0 0);
    border: 1px solid rgb(21, 21, 21);
    box-shadow: 0 0.75px 3px black;

    grid-column: calc(var(--columns) - var(--select-columns) + 1) / span calc(var(--select-columns));
}

.reminder-form label,
legend {
    font-size: 1.2rem;
}

.reminder-form div > * {
    grid-column: 1 / span var(--columns);
}

.reminder-form div input:has(+.units) {
    grid-column: 1 / span calc(var(--columns) - var(--select-columns));
}

.reminder-form > input[type="checkbox"] + label {
    justify-self: start;
}

.reminder-form button[type="submit"] {
    grid-column: 1 / span 2;
    margin-right: 4px;
}

.reminder-form button[type="reset"] {
    grid-column: 3 / span 1;
}

.error-message {
    color: var(--input-invalid-color);
    font-size: 1rem;
    display: none;
    margin: 0;
}

.reminder-form :is(input, textarea):not(:placeholder-shown):invalid ~ .error-message,
[dirty]:not(:valid, :disabled):is(input, textarea, select) ~ .error-message {
    display: inline;
}

.reminder-form > p {
    text-align: right;
}

.reminder-form > p span {
    color: var(--input-invalid-color)
}

/* ==================================
INPUTS
================================== */

input,
button,
textarea,
select {
    background-color: var(--input-color);
    border-radius: 4px;
    color: var(--fore-color);
    transition: all 250ms;
    padding: 8px;
    font-size: var(--input-font-size);
    border: 2px solid transparent;
    box-shadow: 0 0.75px 4px black;
    transition: opacity 250ms;
}

input:has(+.units) {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
    z-index: 1;
}

input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

input[type=number] {
    -moz-appearance: textfield;
    appearance: textfield;
}

input[use-units] {
    text-align: right;
}

input[use-units]:focus {
    text-align: left;
}

input:disabled { 
    opacity: 0.5;
}

button {
    padding: 20px;
    border-radius: 10px;
    border-width: 2px;
    position: relative;
    transition: all 250ms;
    font-weight: bold;
    background-color: var(--primary-color);
    color: white;
}

button:not(:disabled) {
    cursor: pointer;
}

button:disabled {
    filter: brightness(60%);
}

button[action="destructive"] {
    background-color: var(--outline-buttton-color);
    border-color: var(--input-invalid-color);
    color: var(--input-invalid-color);
    backdrop-filter: brightness(125%);
}

button svg {
    width: 100%;
    height: 100%;
}

button.primary svg {
    fill: white;
}

button[action="destructive"] svg {
    fill: var(--input-invalid-color);
    transition: fill 250ms;
}

button.svg-button {
    background-color: transparent;
    border: none;
    aspect-ratio: -1;
    box-shadow: none;
    padding: 0;
}

button.svg-button:not(:disabled):hover,
button.svg-button:not(:disabled):focus-visible {
    background-color: transparent;
}

button.svg-button svg {
    fill: var(--fore-color);
    transition: fill 250ms;
    inset: 0;
}

button.svg-button:not(:disabled):hover > svg,
button.svg-button:not(:disabled):focus-visible > svg {
    fill: var(--primary-color);
}

button:focus-visible, 
textarea:focus-visible,
select:focus-visible,
input:focus-visible,
input[type="checkbox"]:focus-visible + label::after {
    outline: var(--focus-visible-outline);
}

button:not(:disabled):hover,
button:not(:disabled):focus-visible {
    background-color: var(--primary-color-darker)
}

button[action="destructive"]:not(:disabled):hover,
button[action="destructive"]:not(:disabled):focus-visible {
    color: white;
    background-color: var(--input-invalid-color);
}

button[action="destructive"]:not(:disabled):hover svg,
button[action="destructive"]:not(:disabled):focus-visible svg {
    color: white;
    fill: white;
}

.reminder-form textarea {
    display: block;
    resize: none;
}

.reminder-form input:not(:placeholder-shown):invalid,
[dirty]:not(:valid, :disabled, :focus, [readonly]):is(input, textarea, select) {
    border-color: var(--input-invalid-color);
}

input[type="checkbox"] {
    opacity: 0;
    position: absolute;

    /* So they cannot be clicked */
    z-index: -1;
}

input[type="checkbox"] + label {
    position: relative;
    height: 100%;
    line-height: 150%;
    text-align: center;
    display: inline-block;

    left: calc((var(--checkbox-width) + var(--checkbox-margin)));
}

/* Styles the checkbox's background */
input[type="checkbox"] + label::before {
    content: '';
    top: 0;
    background-color: var(--input-invalid-color);
    border-radius: 20px;
    line-height: 20px;
    border: 2px solid rgb(21, 21, 21);
    box-shadow: 0 2px 2px black;

    position: absolute;
    display: inline-block;
    height: var(--checkbox-height);
    width: var(--checkbox-width);
    left: calc(-1 * (var(--checkbox-width) + var(--checkbox-margin)));

    transition: all 250ms;
}

/* Changes the checkbox's background color when checked */
input[type="checkbox"]:checked + label::before {
    background-color: var(--input-success-color);
}

/* Styles the checkbox's little notch */
input[type="checkbox"] + label::after {
    content: '';
    background-color: var(--input-color);
    border-radius: 100%;
    box-shadow: 0 2px 2px black;

    height: var(--checkbox-height);
    width: calc(var(--checkbox-width) * 0.5);
    position: absolute;
    left: calc(-1 * (var(--checkbox-width) + var(--checkbox-margin)));
    top: 0;

    transition: all 250ms;
}

/* Shifts the notch over to the other side of the checkbox when it is 
checked */
input[type="checkbox"]:checked + label::after {
    left: calc(-1 * (var(--checkbox-width) + var(--checkbox-margin)) + (var(--checkbox-width)) * 0.5);
}

label:has(
    +input:required, 
    +select:required,
    +textarea:required
)::after {
    content: ' *';
    color: var(--input-invalid-color);
}

fieldset {
    border: none;
    padding: 0;
}

input[type="radio"] {
    --outline-offset: .15em;
    /* Fallback */
    accent-color: var(--primary-color);

    width: 1em; 
    height: 1em;
    margin: calc(0.25em + var(--outline-offset));

    appearance: none;
    background-color: transparent;
    border-radius: 50%;
    outline: .15em solid var(--popup-accent-color);
    outline-offset: var(--outline-offset);
    box-shadow: none;
}

input[type="radio"]:not(:checked):where(:hover, :focus-visible) {
    outline-color: var(--primary-color);
}

input[type="radio"]:checked {
    background-color: var(--primary-color);
}

label:has(input[type="radio"]) {
    display: inline-flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
}

/* Select menu */

.combobox-wrapper {
    --listbox-max-height: 10rem;
    --listbox-item-padding: 0.35rem;

    position: relative;
    cursor: pointer;
}

.combobox-wrapper div {
    padding: 0;
    margin: 0;
}

.combobox--input svg {
    position: absolute;
    margin: auto;
    top: 50%;
    bottom: 50%;
    right: 0;
    translate: 0 20%;

    fill: var(--fore-color);

    transition: transform 200ms;
}

.combobox--input input[aria-expanded="true"] ~ svg {
    transform: rotateZ(180deg);
}

.combobox-wrapper .listbox-wrapper {
    position: relative;
}

.combobox-wrapper ul[role="listbox"] {
    position: absolute;
    list-style: none;
    padding-left: 0;
    margin: 0;
    width: 100%;
    max-height: var(--listbox-max-height);
    overflow-x: hidden;
    overflow-y: auto;

    background-color: var(--select-options-color);
    border-radius: 4px;
    clip-path: inset(0 0 0 0);

    transition: clip-path 200ms;
}

.combobox-wrapper:has(input[aria-expanded="false"]) .listbox-wrapper ul {
    clip-path: inset(0 0 100% 0);
    overflow: hidden;
}

.combobox-wrapper ul[role="listbox"] li {
    padding: var(--listbox-item-padding);
    transition: background-color 250ms;
}

.combobox-wrapper ul[role="listbox"] li[data-filtered="true"] {
    display: none;
}

.combobox-wrapper ul[role="listbox"] li:hover,
ul[role="listbox"]:not(:has(li:hover)) li[selected="true"] {
    background-color: var(--primary-color);
}

/* POPUP */

#popup[open] {
    position: absolute;
    display: grid;
    grid: 3rem 1fr 6rem / 1fr;
    align-items: start;

    padding: 1.5rem;
    min-width: 15rem;
    width: 50%;
    max-width: 25rem;
    min-height: 15rem;
    height: 30%;
    max-height: 25rem;
    overflow: hidden;

    border-radius: 0.5rem;
    background-color: var(--bg-color-start);
    box-shadow: 0 0 15px black;
    border: none;
    
    animation: dialog-show 350ms ease-in-out normal;
}

#popup .title {
    width: 100%;
    margin-bottom: 0;
    
    text-align: center;
    border-bottom: 0.3rem solid var(--popup-accent-color);
}

#popup .content {
    width: 100%;
    max-height: 100%;
    text-align: center;
    font-size: 1.2rem;
    word-wrap: break-word;
    overflow-x: hidden;
    overflow-y: auto;
}

#popup > form {
    justify-self: center;
    align-self: end;
}

dialog::backdrop {
    top: var(--header-height);
    background: rgba(0, 0, 0, 0.25);
}

@keyframes dialog-show {
    from {
        opacity: 0;
        translate: 0 10%;
    }

    to {
        opacity: 1;
        translate: 0 0;
    }
}

@keyframes dialog-hide {
    from {
        opacity: 1;
        translate: 0;
    }

    to {
        opacity: 0;
        translate: 0 10%;
    }
}

.modal {
    overflow: hidden;
    padding: 1.5rem;
}

#modal-title {
    width: 100%;
    margin: 0;
    text-align: center;
}

#modal-body {
    overflow-x: hidden;
    overflow-y: auto;
    width: 100%;
    flex: 8;
    word-wrap: break-word;
}

#modal-button {
    flex: 1;
    width: 100%;
}

/* ==================================
UTILITY CLASSES
================================== */

.center-row {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
}

.center-column {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.center-horizontal {
    display: flex;
    justify-content: center;
}